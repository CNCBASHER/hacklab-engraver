# Generated by stepconf at Sun Mar  8 21:32:59 2009
# If you make changes to this file, they will be
# overwritten when you run stepconf again
loadrt trivkins
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]SERVO_PERIOD key=[EMCMOT]SHMEM_KEY num_joints=[TRAJ]AXES
loadrt probe_parport
loadrt hal_parport cfg=0x378
setp parport.0.reset-time 100000
loadrt stepgen step_type=0,0,0,0
loadrt charge_pump

###################################################################################
# Raster Mask - stream in laser on/off commands behind AXIS's back
# Input stream format: reset beam xop xarg
#   reset:  0=mask command 1=reset (begin mask sequence with "1 0 0 0", every other command starts with 0)
#   beam:   0=off 1=on
#   xop:    X axis comparison operation 0=less-or-equal 1=greater
#   xarg:   X axis comparison operand

loadrt streamer depth=256 cfg="bbbf"
net mask-reset     <= streamer.0.pin.0
net mask-beam      <= streamer.0.pin.1
net mask-xop       <= streamer.0.pin.2
net mask-xarg      <= streamer.0.pin.3
net mask-empty     <= streamer.0.empty
net mask-read => streamer.0.enable

# hardware reported X axis position
net motion-xpos-fb <= axis.0.join-pos-fb

# mask-lte <= motion-xpos-fb < mask-xarg
net motion-xpos-fb => comp.mask-lte.in0
net mask-xarg => comp.mask-lte.in1
net mask-lte <= comp.mask-lte.out

# mask-test <= !(mask-xop ^ mask-lte)
mask-xop => xor2.mask-not-test.in0
mask-lte => xor2.mask-not-test.in1
mask-not-test <= xor2.mask-not-test.out

mask-not-test => not.mask-test.in
mask-test <= not.mask-test.out

# if job is running, read only when test is true
# if job is not running, read until reset is found
# mask-read <= (laser-coarse && mask-test) || !(laser-coarse || mask-reset)

net laser-coarse => and2.mask-next-command.in0
net mask-test => and2.mask-next-command.in1
net mask-next-command <= and2.mask-next-command.out

net laser-coarse => or2.mask-not-ffw.in0
net mask-reset => or2.mask-not-ffw.in1
net mask-not-ffw <= or2.mask-not-ffw.out

net mask-not-ffw => not.mask-ffw.in
net mask-ffw <= not.mask-ffw.out

net mask-next-command => or2.mask-read.in0
net mask-ffw => or2.mask-read.in1
net mask-read <= or2.mask-read.out

# laser-mask <=  mask-not-empty && mask-beam
net mask-empty => not.mask-not-empty.in
net mask-not-empty <= not.mask-not-empty.out

net mask-beam => and2.laser-mask.in0
net mask-not-empty >= and2.laser-mask.in1
net laser-mask <= and2.laser-mask.out

# Raster Mask - end
#######################################################################

# coarse laser control, wired to spindle on/off (M3/M5), not realtime
net laser-coarse <= motion.spindle-on

# fine laser control, wired to digital output 0 (M62 P0/M63 P0), realtime
newsig laser-gate bit
net laser-gate <= motion.digital-out-00

# legacy laser control, wired to Z < 0, can be used instead of M62/M63
newsig discrete-z bit
loadrt comp count=1
net zpos-cmd => comp.0.in0
setp comp.0.in1 0
net discrete-z <= comp.0.out

# laser power wired to spindle speed (S-)
#newsig laser_power float
#net laser_power <= motion.spindle-speed-out

# use pwm to control laser power
# disabled because it works like shit (pwm is too slow to make a smooth burn)
#newsig laser-final bit
#newsig laser_pulse bit
#loadrt pwmgen output_type=0
#setp pwmgen.0.scale 1
#setp pwmgen.0.offset 0
#setp pwmgen.0.pwm-freq 100
#net laser-final => pwmgen.0.enable
#net laser_power => pwmgen.0.value
#net laser_pulse <= pwmgen.0.pwm
#net laser_pulse => parport.0.pin-01-out

# laser-final <= laser-coarse & (laser-gate | discrete-z | laser-mask)

net laser-gate => or2.laser-gcode.in0
net discrete-z => or2.laser-gcode.in1
net laser-gcode <= or2.laser-gcode.out

net laser-gcode => or2.laser-fine.in0
net laser-mask => or2.laser-fine.in0
net laser-fine <= or2.laser-fine.out

net laser-fine => and2.laser-final.in0
net laser-coarse => and2.laser-final.in1
net laser-final <= and2.laser-final-out

# laser-final => hardware
net laser-final => parport.0.pin-01-out

# make Z and W axes always homed
#setp axis.2.homed 1   # Z
#setp axis.8.homed 1   # W

addf parport.0.read base-thread
addf stepgen.make-pulses base-thread
addf logic.0 base-thread
addf logic.1 base-thread
#addf pwmgen.make-pulses base-thread
addf parport.0.write base-thread
addf parport.0.reset base-thread
addf charge-pump base-thread

addf stepgen.capture-position servo-thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf stepgen.update-freq servo-thread
#addf pwmgen.update servo-thread
addf comp.0 servo-thread

net xdir => parport.0.pin-02-out
net xstep => parport.0.pin-03-out
setp parport.0.pin-03-out-reset 1
net ydir => parport.0.pin-04-out
net ystep => parport.0.pin-05-out
setp parport.0.pin-05-out-reset 1
net wdir => parport.0.pin-06-out
net wstep => parport.0.pin-07-out
setp parport.0.pin-07-out-reset 1

# invert ydir
#setp parport.0.pin-04-out-invert 1


net xenable => parport.0.pin-14-out

net home-x <= parport.0.pin-10-in
net home-y <= parport.0.pin-12-in
net estop-ext <= parport.0.pin-15-in

setp stepgen.0.position-scale [AXIS_0]SCALE
setp stepgen.0.steplen 15200
setp stepgen.0.stepspace 15200
setp stepgen.0.dirhold 15200
setp stepgen.0.dirsetup 15200
setp stepgen.0.maxaccel [AXIS_0]STEPGEN_MAXACCEL
net xpos-cmd axis.0.motor-pos-cmd => stepgen.0.position-cmd
net xpos-fb stepgen.0.position-fb => axis.0.motor-pos-fb
net xstep <= stepgen.0.step
net xdir <= stepgen.0.dir
net xenable axis.0.amp-enable-out => stepgen.0.enable
net home-x => axis.0.home-sw-in

setp stepgen.1.position-scale [AXIS_1]SCALE
setp stepgen.1.steplen 15200
setp stepgen.1.stepspace 15200
setp stepgen.1.dirhold 15200
setp stepgen.1.dirsetup 15200
setp stepgen.1.maxaccel [AXIS_1]STEPGEN_MAXACCEL
net ypos-cmd axis.1.motor-pos-cmd => stepgen.1.position-cmd
net ypos-fb stepgen.1.position-fb => axis.1.motor-pos-fb
net ystep <= stepgen.1.step
net ydir <= stepgen.1.dir
net yenable axis.1.amp-enable-out => stepgen.1.enable
net home-y => axis.1.home-sw-in

setp stepgen.2.position-scale [AXIS_2]SCALE
setp stepgen.2.steplen 1
setp stepgen.2.stepspace 0
setp stepgen.2.dirhold 15200
setp stepgen.2.dirsetup 15200
setp stepgen.2.maxaccel [AXIS_2]STEPGEN_MAXACCEL
net zpos-cmd axis.2.motor-pos-cmd => stepgen.2.position-cmd
net zpos-fb stepgen.2.position-fb => axis.2.motor-pos-fb
net zstep <= stepgen.2.step
net zdir <= stepgen.2.dir
net zenable axis.2.amp-enable-out => stepgen.2.enable
net home-z => axis.2.home-sw-in

setp stepgen.3.position-scale [AXIS_8]SCALE
setp stepgen.3.steplen 1
setp stepgen.3.stepspace 0
setp stepgen.3.dirhold 15200
setp stepgen.3.dirsetup 15200
setp stepgen.3.maxaccel [AXIS_8]STEPGEN_MAXACCEL
net wpos-cmd axis.8.motor-pos-cmd => stepgen.3.position-cmd
net wpos-fb stepgen.3.position-fb => axis.8.motor-pos-fb
net wstep <= stepgen.3.step
net wdir <= stepgen.3.dir
net wenable axis.8.amp-enable-out => stepgen.3.enable
net home-w => axis.8.home-sw-in

net estop-out <= iocontrol.0.user-enable-out
net estop-ext => iocontrol.0.emc-enable-in

loadusr -W hal_manualtoolchange
net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared

# connect the charge pump signal to an output
net charge-pump <= charge-pump.out
setp parport.0.pin-17-out-reset 1
net charge-pump => parport.0.pin-17-out 
setp charge-pump.enable 1
